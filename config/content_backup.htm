<h1>網路連線設定</h1>
<p><span>正常情況下, 電腦輔助設計室中的電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址</span></p>
<p><span><img alt="" height="57" src="/images/chrome_dnLJxnnHYb.png" width="400"/></span></p>
<p><span><img alt="" height="442" src="/images/rundll32_8UXTtVPqvg.png" width="400"/><img alt="" height="129" src="/images/rundll32_Oe4D5AFyvp.png" width="400"/></span></p>
<p><span></span></p>
<h1>如何改版</h1>
<p>1.首先進入到我在y槽中我所要更改的跟目錄下(EX: cd 2019wcmj)再來數入(python wsgi.py)取得我能夠在動態更改的網址Ctrl+c後到網路上進行更改完成後回到cmd按Ctrl+cru結束更改</p>
<p>2.推送更改完後的版本</p>
<p>        (1) git add . =&gt;對我的改版進行 拍快照</p>
<p>        (2) git commit -m"add final project" =&gt;把剛剛git add的東西進行提交</p>
<p>        (3) git push =&gt;推送=把剛剛git commit的東西推送到靜態網站</p>
<p>3.要確定倉儲在近端push至遠端的proxy於自己網路上設定的是同一個代理主機</p>
<p>4.要跟改我所要儲存的github帳號與食用者名稱</p>
<p></p><h1>倉儲改版</h1>
<p>建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版<br/><br/>可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令.<br/><br/>建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版.<br/><br/>另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端.<br/><br/>git add<br/><br/>git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容.<br/><br/>git add 在 GIT 架構下, 是對所新增或修改的內容拍快照:<br/><br/>git commit<span> </span><br/><br/>git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間.<br/><br/>當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息.<br/><br/>git push<br/><br/>git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲.</p>
<h1>期中報告</h1>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="691" src="https://www.youtube.com/embed/PA5OycHGAso" width="1150"></iframe></p>
<h1>期末報告</h1>
<h1>國旗</h1>
<!-- for Brython -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 brython() -->
<p>
<script>
window.onload=function(){
brython(1);
}
</script>
</p>
<!-- 以下利用 Brython 程式執行繪圖 -->
<p><canvas height="400" id="taiwan_flag" width="600"></canvas></p>
<script type="text/python3">
# 導入 doc
from browser import document as doc
import math
  
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<p></p>
<!-- 以下利用 Brython 程式執行繪圖 -->
<p><canvas height="400" id="taiwan_flag2" width="600"></canvas></p>
<script type="text/python3">
# 導入 doc
from browser import document as doc
import math
  
# 準備繪圖畫布
canvas = doc["taiwan_flag2"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<h1>VPN</h1>
<p></p>
<p><img caption="false" height="265" src="/images/chrome_nqCxLR6ytf.png" width="400"/></p>
<p></p>
<p><img alt="" height="364" src="/images/dsNetworkConnect_XGxwjmFDIP.png" width="400"/></p>
<p><img caption="false" height="197" src="/images/chrome_gM4g13T897.png" width="400"/></p>
<p><img alt="" height="264" src="/images/chrome_CHMuQnJ1hj.png" width="400"/></p>
<p></p>
<p></p><h1>代理主機</h1>
<p>虛擬主機</p>
<p><img alt="" height="245" src="/images/VirtualBox_Vr9IGsf7cA.png" width="400"/></p>
<p>網路</p>
<p><img alt="" height="250" src="/images/VirtualBox_Zl7WWtADbF.png" width="400"/></p>
<p>虛擬主機開機完成的情形</p>
<p><img alt="" height="348" src="/images/VirtualBox_jfQV2Fa5CZ.png" width="400"/></p>
<p>下載nginx及查看網路</p>
<p><img alt="" height="300" src="/images/VirtualBox_9FEm9804hL.png" width="400"/></p>
<p>完成</p>
<p><img alt="" height="232" src="/images/chrome_P24ZZNcK3N.png" width="400"/></p>